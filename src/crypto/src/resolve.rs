// Copyright (c) 2022 - 2023 Intel Corporation
//
// SPDX-License-Identifier: Apache-2.0

use super::td_report::verify_td_report;
use super::x509::{self, Extension, X509Error};
use super::x509::{AlgorithmIdentifier, ExtendedKeyUsage, Extensions};
use crate::x509::Certificate;
use alloc::vec;
use der::asn1::ObjectIdentifier;
use der::{Any, Decodable, Encodable, Tag};
use ring::digest;
use ring::pkcs8::Document;
use ring::rand::SystemRandom;
use ring::signature::{self, EcdsaKeyPair, KeyPair};
use spdmlib::error::{SpdmResult, SPDM_STATUS_INVALID_CERT};

use tdx_tdcall::tdreport::TD_REPORT_SIZE;

pub const BASIC_CONSTRAINTS: ObjectIdentifier = ObjectIdentifier::new("2.5.29.19");
pub const SUBJECT_KEY_IDENTIFIER: ObjectIdentifier = ObjectIdentifier::new("2.5.29.14");
pub const KEY_USAGE: ObjectIdentifier = ObjectIdentifier::new("2.5.29.15");
pub const AUTHORITY_KEY_IDENTIFIER: ObjectIdentifier = ObjectIdentifier::new("2.5.29.35");
pub const EXTENDED_KEY_USAGE: ObjectIdentifier = ObjectIdentifier::new("2.5.29.37");

pub const VTPMTD_EXTENDED_KEY_USAGE: ObjectIdentifier =
    ObjectIdentifier::new("2.16.840.1.113741.1.5.5.2.1");
pub const VTPMTD_CA_EXTENDED_KEY_USAGE: ObjectIdentifier =
    ObjectIdentifier::new("2.16.840.1.113741.1.5.5.2.5");
pub const EXTNID_VTPMTD_REPORT: ObjectIdentifier =
    ObjectIdentifier::new("2.16.840.1.113741.1.5.5.2.4");
pub const EXTNID_VTPMTD_QUOTE: ObjectIdentifier =
    ObjectIdentifier::new("2.16.840.1.113741.1.5.5.2.2");
pub const EXTNID_VTPMTD_EVENT_LOG: ObjectIdentifier =
    ObjectIdentifier::new("2.16.840.1.113741.1.5.5.2.3");

pub const TDVF_EXTENDED_KEY_USAGE: ObjectIdentifier =
    ObjectIdentifier::new("2.16.840.1.113741.1.5.5.3.1");
pub const EXTNID_TDVF_REPORT: ObjectIdentifier =
    ObjectIdentifier::new("2.16.840.1.113741.1.5.5.3.4");
pub const EXTNID_TDVF_QUOTE: ObjectIdentifier =
    ObjectIdentifier::new("2.16.840.1.113741.1.5.5.3.2");

pub const SERVER_AUTH: ObjectIdentifier = ObjectIdentifier::new("1.3.6.1.5.5.7.3.1");
pub const CLIENT_AUTH: ObjectIdentifier = ObjectIdentifier::new("1.3.6.1.5.5.7.3.2");

// As specified in https://datatracker.ietf.org/doc/html/rfc5480#appendix-A
// id-ecPublicKey OBJECT IDENTIFIER ::= {
//     iso(1) member-body(2) us(840) ansi-X9-62(10045) keyType(2) 1
// }
pub const ID_EC_PUBKEY_OID: ObjectIdentifier = ObjectIdentifier::new("1.2.840.10045.2.1");
// secp384r1 OBJECT IDENTIFIER ::= {
//     iso(1) identified-organization(3) certicom(132) curve(0) 34
// }
pub const SECP384R1_OID: ObjectIdentifier = ObjectIdentifier::new("1.3.132.0.34");

#[derive(Debug)]
pub enum ResolveError {
    GenerateKey,
    GenerateCertificate(X509Error),
    SignCertificate,
    GetTdReport,
    GetTdQuote,
}

impl From<X509Error> for ResolveError {
    fn from(e: X509Error) -> Self {
        ResolveError::GenerateCertificate(e)
    }
}

pub fn generate_ecdsa_keypairs() -> Option<Document> {
    let rand = SystemRandom::new();
    let pkcs8_bytes =
        EcdsaKeyPair::generate_pkcs8(&signature::ECDSA_P384_SHA384_ASN1_SIGNING, &rand)
            .map_err(|_| ResolveError::GenerateKey);

    if let Ok(pkcs8_bytes) = pkcs8_bytes {
        Some(pkcs8_bytes)
    } else {
        None
    }
}

fn generate_td_report(public_key: &[u8]) -> Result<alloc::vec::Vec<u8>, ResolveError> {
    let public_key_hash = digest::digest(&digest::SHA384, public_key);

    // Generate the TD Report that contains the public key hash as nonce
    let mut td_report_data = [0u8; 64];
    td_report_data[..public_key_hash.as_ref().len()].copy_from_slice(public_key_hash.as_ref());
    let td_report = tdx_tdcall::tdreport::tdcall_report(&td_report_data)
        .map_err(|_| ResolveError::GetTdReport)?;
    Ok(td_report.as_bytes().to_vec())
}

pub fn generate_certificate(
    key_pair: &EcdsaKeyPair,
    event_log: &[u8],
) -> Result<alloc::vec::Vec<u8>, ResolveError> {
    // This is a closure for signing certificate used by x.509 certificate builder
    let mut sig_buf: alloc::vec::Vec<u8> = alloc::vec::Vec::new();
    let signer = |data: &[u8], sig_buf: &mut alloc::vec::Vec<u8>| {
        let rand = SystemRandom::new();
        let signature = key_pair.sign(&rand, data).unwrap();
        sig_buf.extend_from_slice(signature.as_ref());
    };

    // Generate tdreport
    let td_report = generate_td_report(key_pair.public_key().as_ref())?;

    // Generate x.509 certificate
    let algorithm = AlgorithmIdentifier {
        algorithm: ID_EC_PUBKEY_OID,
        parameters: Some(Any::new(Tag::ObjectIdentifier, SECP384R1_OID.as_bytes()).unwrap()),
    };
    let eku = vec![VTPMTD_EXTENDED_KEY_USAGE];
    let eku = eku
        .to_vec()
        .map_err(|e| ResolveError::GenerateCertificate(X509Error::DerEncoding(e)))?;
    let x509_certificate =
        x509::CertificateBuilder::new(algorithm, algorithm, key_pair.public_key().as_ref())?
            // 1970-01-01T00:00:00Z
            .set_not_before(core::time::Duration::new(0, 0))?
            // 9999-12-31T23:59:59Z
            .set_not_after(core::time::Duration::new(253402300799, 0))?
            .add_extension(Extension::new(
                EXTENDED_KEY_USAGE,
                Some(false),
                Some(eku.as_slice()),
            )?)?
            .add_extension(Extension::new(
                EXTNID_VTPMTD_REPORT,
                Some(false),
                Some(td_report.as_slice()),
            )?)?
            .add_extension(Extension::new(
                EXTNID_VTPMTD_EVENT_LOG,
                Some(false),
                Some(event_log),
            )?)?
            .sign(&mut sig_buf, signer)?
            .build();

    x509_certificate
        .to_vec()
        .map_err(|e| ResolveError::GenerateCertificate(X509Error::DerEncoding(e)))
}

// Here is a workaround to cleanup the structures that contain sensitive
// data, since some of the structure defined by ring do not implement the
// trait 'drop' to zero the content
// See https://github.com/briansmith/ring/issues/15
pub fn get_cert_from_certchain(cert_chain: &[u8], index: isize) -> SpdmResult<(usize, usize)> {
    let mut offset = 0usize;
    let mut this_index = 0isize;
    let cert_chain_size = cert_chain.len();
    loop {
        if cert_chain[offset..].len() < 4 || offset > cert_chain.len() {
            return Err(SPDM_STATUS_INVALID_CERT);
        }
        if cert_chain[offset] != 0x30 || cert_chain[offset + 1] != 0x82 {
            return Err(SPDM_STATUS_INVALID_CERT);
        }
        let this_cert_len =
            ((cert_chain[offset + 2] as usize) << 8) + (cert_chain[offset + 3] as usize) + 4;
        if this_cert_len > cert_chain_size - offset {
            return Err(SPDM_STATUS_INVALID_CERT);
        }
        if this_index == index {
            // return this one
            return Ok((offset, offset + this_cert_len));
        }
        this_index += 1;
        if (offset + this_cert_len == cert_chain_size) && (index == -1) {
            // return the last one
            return Ok((offset, offset + this_cert_len));
        }
        offset += this_cert_len;
    }
}

pub fn parse_extensions<'a>(extensions: &'a Extensions) -> Option<&'a [u8]> {
    let mut has_tdvf_usage = false;
    let mut td_report = None;

    for extn in extensions.get() {
        if extn.extn_id == EXTENDED_KEY_USAGE {
            if let Some(extn_value) = extn.extn_value {
                let eku = ExtendedKeyUsage::from_der(extn_value.as_bytes()).ok();
                if eku.is_none() {
                    log::error!("Cannot parse EXTENDED_KEY_USAGE\n");
                    break;
                }

                if eku.unwrap().contains(&TDVF_EXTENDED_KEY_USAGE) {
                    has_tdvf_usage = true;
                }
            }
        } else if extn.extn_id == EXTNID_TDVF_REPORT {
            td_report = extn.extn_value.map(|v| v.as_bytes());
        }
    }

    if !has_tdvf_usage {
        log::error!("no tdvf_usage\n");
        return None;
    }

    if let Some(td_report) = td_report {
        Some(td_report)
    } else {
        log::error!("no td_report\n");
        None
    }
}

pub fn verify_peer_cert(cert_chain: &[u8], td_report_buf: &mut [u8]) -> SpdmResult {
    if td_report_buf.len() != TD_REPORT_SIZE {
        return Err(SPDM_STATUS_INVALID_CERT);
    }

    let (start, end) = get_cert_from_certchain(cert_chain, 0)?;

    let cert =
        Certificate::from_der(&cert_chain[start..end]).map_err(|_| SPDM_STATUS_INVALID_CERT)?;

    let extensions = cert.tbs_certificate.extensions.as_ref();

    if extensions.is_none() {
        return Err(SPDM_STATUS_INVALID_CERT);
    }

    let td_report = parse_extensions(extensions.unwrap());
    if td_report.is_none() {
        return Err(SPDM_STATUS_INVALID_CERT);
    }

    let td_report = td_report.unwrap();

    // verify td_report
    verify_td_report(td_report)?;

    td_report_buf.copy_from_slice(td_report);

    Ok(())
}

#[cfg(test)]
mod test {
    use super::*;
    const CERT_TEST: [u8; 1533] = [
        0x30, 0x82, 0x01, 0xd5, 0x30, 0x82, 0x01, 0x5a, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x14,
        0x4b, 0x85, 0xa3, 0xae, 0x94, 0x79, 0x3d, 0x5e, 0x34, 0x4f, 0xc6, 0xb3, 0xb2, 0x5b, 0x3a,
        0xef, 0x3c, 0x2c, 0xe3, 0xd3, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04,
        0x03, 0x03, 0x30, 0x21, 0x31, 0x1f, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x16,
        0x44, 0x4d, 0x54, 0x46, 0x20, 0x6c, 0x69, 0x62, 0x73, 0x70, 0x64, 0x6d, 0x20, 0x45, 0x43,
        0x50, 0x32, 0x35, 0x36, 0x20, 0x43, 0x41, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x33, 0x30, 0x34,
        0x30, 0x33, 0x30, 0x35, 0x35, 0x35, 0x35, 0x33, 0x5a, 0x17, 0x0d, 0x33, 0x33, 0x30, 0x33,
        0x33, 0x31, 0x30, 0x35, 0x35, 0x35, 0x35, 0x33, 0x5a, 0x30, 0x21, 0x31, 0x1f, 0x30, 0x1d,
        0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x16, 0x44, 0x4d, 0x54, 0x46, 0x20, 0x6c, 0x69, 0x62,
        0x73, 0x70, 0x64, 0x6d, 0x20, 0x45, 0x43, 0x50, 0x32, 0x35, 0x36, 0x20, 0x43, 0x41, 0x30,
        0x76, 0x30, 0x10, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x05, 0x2b,
        0x81, 0x04, 0x00, 0x22, 0x03, 0x62, 0x00, 0x04, 0x14, 0xdc, 0x60, 0x3b, 0x7a, 0x09, 0x8f,
        0x4c, 0x6c, 0xa9, 0xfd, 0x94, 0xe0, 0x22, 0xc5, 0xab, 0xe7, 0x56, 0x16, 0xf1, 0xa7, 0x60,
        0x84, 0x78, 0x64, 0x93, 0x6c, 0xc2, 0x66, 0xec, 0x5c, 0xb9, 0x96, 0xd2, 0x32, 0xfc, 0xac,
        0xfc, 0xd7, 0x22, 0x73, 0x59, 0xb7, 0x9d, 0xa8, 0x02, 0x79, 0x2f, 0xae, 0x44, 0xeb, 0xfd,
        0x84, 0xd9, 0x07, 0xb2, 0x66, 0xe0, 0x71, 0x3b, 0x8b, 0xe7, 0x22, 0xb7, 0x14, 0xbf, 0xe0,
        0x35, 0x90, 0x10, 0x26, 0x87, 0xcf, 0x22, 0x4b, 0xcf, 0xe3, 0x57, 0xb0, 0xb5, 0x04, 0x4e,
        0x05, 0x3b, 0x67, 0x8b, 0x7b, 0x1f, 0x64, 0x1c, 0xeb, 0x67, 0xba, 0x51, 0xe9, 0xa8, 0xa3,
        0x53, 0x30, 0x51, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x2d,
        0xe6, 0x2e, 0xba, 0x60, 0xd9, 0xec, 0xa1, 0x86, 0x3b, 0x78, 0xd8, 0x44, 0x81, 0xc0, 0xe7,
        0x1c, 0x99, 0x72, 0x97, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16,
        0x80, 0x14, 0x2d, 0xe6, 0x2e, 0xba, 0x60, 0xd9, 0xec, 0xa1, 0x86, 0x3b, 0x78, 0xd8, 0x44,
        0x81, 0xc0, 0xe7, 0x1c, 0x99, 0x72, 0x97, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01,
        0x01, 0xff, 0x04, 0x05, 0x30, 0x03, 0x01, 0x01, 0xff, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86,
        0x48, 0xce, 0x3d, 0x04, 0x03, 0x03, 0x03, 0x69, 0x00, 0x30, 0x66, 0x02, 0x31, 0x00, 0xc7,
        0x8c, 0x51, 0x68, 0x9f, 0x3e, 0x65, 0xb8, 0x97, 0x08, 0xbb, 0x34, 0x60, 0xe1, 0xe1, 0x4b,
        0x36, 0xc3, 0x07, 0xa9, 0xd6, 0x96, 0x4d, 0x50, 0x63, 0xf6, 0x80, 0xed, 0x3f, 0x0b, 0x84,
        0xe0, 0xb7, 0x03, 0x08, 0x12, 0xc8, 0x28, 0xbb, 0x5b, 0xc4, 0xcc, 0x8d, 0x0b, 0xff, 0x23,
        0x84, 0x59, 0x02, 0x31, 0x00, 0xdd, 0xf9, 0xa8, 0x3d, 0xf7, 0x1c, 0xe7, 0x7a, 0xf7, 0xd7,
        0x5c, 0xe2, 0x0b, 0xf8, 0x2b, 0xe5, 0x72, 0x5c, 0x4a, 0xfb, 0xd8, 0xdb, 0xba, 0x08, 0xf1,
        0x78, 0x94, 0x39, 0xdd, 0x0d, 0x3c, 0x1e, 0x1f, 0x00, 0x2a, 0x58, 0x51, 0x52, 0x5e, 0xb1,
        0x2f, 0xba, 0xe6, 0xb3, 0x7b, 0x95, 0xf5, 0x40, 0x30, 0x82, 0x01, 0xda, 0x30, 0x82, 0x01,
        0x61, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x01, 0x01, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86,
        0x48, 0xce, 0x3d, 0x04, 0x03, 0x03, 0x30, 0x21, 0x31, 0x1f, 0x30, 0x1d, 0x06, 0x03, 0x55,
        0x04, 0x03, 0x0c, 0x16, 0x44, 0x4d, 0x54, 0x46, 0x20, 0x6c, 0x69, 0x62, 0x73, 0x70, 0x64,
        0x6d, 0x20, 0x45, 0x43, 0x50, 0x32, 0x35, 0x36, 0x20, 0x43, 0x41, 0x30, 0x1e, 0x17, 0x0d,
        0x32, 0x33, 0x30, 0x34, 0x30, 0x33, 0x30, 0x35, 0x35, 0x35, 0x35, 0x33, 0x5a, 0x17, 0x0d,
        0x33, 0x33, 0x30, 0x33, 0x33, 0x31, 0x30, 0x35, 0x35, 0x35, 0x35, 0x33, 0x5a, 0x30, 0x30,
        0x31, 0x2e, 0x30, 0x2c, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x25, 0x44, 0x4d, 0x54, 0x46,
        0x20, 0x6c, 0x69, 0x62, 0x73, 0x70, 0x64, 0x6d, 0x20, 0x45, 0x43, 0x50, 0x32, 0x35, 0x36,
        0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x20, 0x63,
        0x65, 0x72, 0x74, 0x30, 0x76, 0x30, 0x10, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02,
        0x01, 0x06, 0x05, 0x2b, 0x81, 0x04, 0x00, 0x22, 0x03, 0x62, 0x00, 0x04, 0xb8, 0x06, 0x8a,
        0xbd, 0x78, 0x64, 0xa2, 0x66, 0x69, 0x74, 0x09, 0xd8, 0xd9, 0x06, 0xfc, 0x53, 0xcf, 0x5e,
        0xe2, 0xc8, 0xd8, 0x43, 0x58, 0x33, 0xa5, 0x06, 0xff, 0x0f, 0xc0, 0xf8, 0xea, 0x14, 0x72,
        0xcc, 0x07, 0x33, 0xb8, 0xe4, 0xe3, 0xd6, 0x47, 0x23, 0x92, 0xaa, 0x7d, 0xb5, 0x4b, 0x2d,
        0xd5, 0x21, 0x3a, 0xd0, 0x2e, 0x2b, 0xec, 0x3e, 0x11, 0xba, 0x02, 0x47, 0x67, 0x51, 0xd5,
        0x1e, 0x98, 0x43, 0xf5, 0xf6, 0x0d, 0x3d, 0x89, 0x9b, 0x8f, 0x8d, 0xb0, 0xb3, 0x12, 0xe2,
        0xcf, 0xe9, 0xb1, 0xd6, 0x63, 0xa8, 0x7f, 0xe4, 0x0c, 0x13, 0x89, 0x7f, 0xae, 0xde, 0xcb,
        0x78, 0x6a, 0x79, 0xa3, 0x5e, 0x30, 0x5c, 0x30, 0x0c, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x04,
        0x05, 0x30, 0x03, 0x01, 0x01, 0xff, 0x30, 0x0b, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x04, 0x04,
        0x03, 0x02, 0x01, 0xfe, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14,
        0xe5, 0x58, 0x59, 0xd4, 0xb6, 0xbc, 0xf5, 0xb8, 0x90, 0xfc, 0xb3, 0xe6, 0x23, 0xcc, 0x48,
        0x0e, 0x0f, 0x70, 0x2a, 0xba, 0x30, 0x20, 0x06, 0x03, 0x55, 0x1d, 0x25, 0x01, 0x01, 0xff,
        0x04, 0x16, 0x30, 0x14, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01, 0x06,
        0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x02, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86,
        0x48, 0xce, 0x3d, 0x04, 0x03, 0x03, 0x03, 0x67, 0x00, 0x30, 0x64, 0x02, 0x30, 0x0a, 0x92,
        0xa0, 0xdd, 0x8e, 0x1e, 0x23, 0x86, 0x39, 0x28, 0xc5, 0xd2, 0x7b, 0x43, 0x57, 0x1c, 0x54,
        0xc1, 0x98, 0xcd, 0x39, 0xe1, 0x5f, 0x2e, 0x9d, 0xcc, 0xf1, 0x49, 0x4a, 0x2c, 0x98, 0x77,
        0xe7, 0xad, 0x72, 0x2c, 0x79, 0x0e, 0x88, 0xcd, 0x39, 0x32, 0xca, 0x17, 0xc3, 0xa9, 0x1c,
        0xf6, 0x02, 0x30, 0x2b, 0x0c, 0x87, 0xa8, 0x96, 0x1d, 0xca, 0x9d, 0xa3, 0xbd, 0x20, 0xb9,
        0x50, 0x5f, 0xa1, 0x09, 0xa4, 0xca, 0x68, 0x23, 0x2a, 0x98, 0x6e, 0x34, 0x34, 0x68, 0xab,
        0x43, 0x31, 0x1f, 0xf0, 0x93, 0x3c, 0xa5, 0x96, 0x36, 0x58, 0xa4, 0x32, 0xf1, 0x43, 0xef,
        0x7f, 0xe5, 0x53, 0x45, 0x7a, 0x34, 0x30, 0x82, 0x02, 0x42, 0x30, 0x82, 0x01, 0xc8, 0xa0,
        0x03, 0x02, 0x01, 0x02, 0x02, 0x01, 0x02, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce,
        0x3d, 0x04, 0x03, 0x03, 0x30, 0x30, 0x31, 0x2e, 0x30, 0x2c, 0x06, 0x03, 0x55, 0x04, 0x03,
        0x0c, 0x25, 0x44, 0x4d, 0x54, 0x46, 0x20, 0x6c, 0x69, 0x62, 0x73, 0x70, 0x64, 0x6d, 0x20,
        0x45, 0x43, 0x50, 0x32, 0x35, 0x36, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64,
        0x69, 0x61, 0x74, 0x65, 0x20, 0x63, 0x65, 0x72, 0x74, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x33,
        0x30, 0x34, 0x30, 0x33, 0x30, 0x35, 0x35, 0x35, 0x35, 0x33, 0x5a, 0x17, 0x0d, 0x33, 0x33,
        0x30, 0x33, 0x33, 0x31, 0x30, 0x35, 0x35, 0x35, 0x35, 0x33, 0x5a, 0x30, 0x2d, 0x31, 0x2b,
        0x30, 0x29, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0c, 0x22, 0x44, 0x4d, 0x54, 0x46, 0x20, 0x6c,
        0x69, 0x62, 0x73, 0x70, 0x64, 0x6d, 0x20, 0x45, 0x43, 0x50, 0x32, 0x35, 0x36, 0x20, 0x72,
        0x65, 0x71, 0x75, 0x73, 0x65, 0x74, 0x65, 0x72, 0x20, 0x63, 0x65, 0x72, 0x74, 0x30, 0x76,
        0x30, 0x10, 0x06, 0x07, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x02, 0x01, 0x06, 0x05, 0x2b, 0x81,
        0x04, 0x00, 0x22, 0x03, 0x62, 0x00, 0x04, 0xb1, 0x01, 0xd6, 0x06, 0xe0, 0xa5, 0xe7, 0xd0,
        0xa9, 0xff, 0xd3, 0x72, 0x10, 0xdd, 0xfe, 0x5e, 0x15, 0x5a, 0x91, 0x69, 0xeb, 0x4e, 0x08,
        0x58, 0x2c, 0x54, 0xc9, 0xd9, 0x94, 0x26, 0xe3, 0xa3, 0x9f, 0x95, 0xb5, 0x71, 0xb1, 0x1c,
        0x3f, 0x59, 0x87, 0xdc, 0x5f, 0x54, 0xda, 0x04, 0x96, 0xa8, 0x24, 0x33, 0xfa, 0xd5, 0x90,
        0xc0, 0x04, 0xfc, 0x1d, 0x86, 0x51, 0x98, 0xbb, 0x6e, 0x20, 0x9e, 0x55, 0x13, 0xb3, 0xad,
        0x09, 0x01, 0xa8, 0x26, 0x71, 0x94, 0x9a, 0x87, 0xe0, 0x1a, 0x40, 0xbc, 0xe0, 0x2a, 0x62,
        0x6c, 0x1e, 0x92, 0xe6, 0xa9, 0xcd, 0x31, 0xf5, 0xa3, 0xbd, 0x27, 0xd4, 0x74, 0xa3, 0x81,
        0xb8, 0x30, 0x81, 0xb5, 0x30, 0x0c, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04,
        0x02, 0x30, 0x00, 0x30, 0x0b, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x04, 0x04, 0x03, 0x02, 0x05,
        0xe0, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x19, 0x40, 0xd6,
        0xb3, 0x45, 0xd7, 0x5c, 0x73, 0x18, 0xde, 0xc6, 0x0b, 0x37, 0x7a, 0x8d, 0x36, 0xd3, 0x48,
        0xd5, 0x33, 0x30, 0x31, 0x06, 0x03, 0x55, 0x1d, 0x11, 0x04, 0x2a, 0x30, 0x28, 0xa0, 0x26,
        0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x83, 0x1c, 0x82, 0x12, 0x01, 0xa0, 0x18, 0x0c,
        0x16, 0x41, 0x43, 0x4d, 0x45, 0x3a, 0x57, 0x49, 0x44, 0x47, 0x45, 0x54, 0x3a, 0x31, 0x32,
        0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x30, 0x2a, 0x06, 0x03, 0x55, 0x1d, 0x25,
        0x01, 0x01, 0xff, 0x04, 0x20, 0x30, 0x1e, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07,
        0x03, 0x01, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x02, 0x06, 0x08, 0x2b,
        0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x09, 0x30, 0x1a, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04,
        0x01, 0x83, 0x1c, 0x82, 0x12, 0x06, 0x04, 0x0c, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01,
        0x83, 0x1c, 0x82, 0x12, 0x02, 0x30, 0x0a, 0x06, 0x08, 0x2a, 0x86, 0x48, 0xce, 0x3d, 0x04,
        0x03, 0x03, 0x03, 0x68, 0x00, 0x30, 0x65, 0x02, 0x30, 0x74, 0xfa, 0xc3, 0xe4, 0x62, 0x38,
        0x97, 0x0d, 0x36, 0x05, 0x98, 0xd0, 0x00, 0x8d, 0x9a, 0x28, 0xe3, 0xe7, 0xc2, 0x94, 0x29,
        0x97, 0xd2, 0x6b, 0xab, 0xea, 0x81, 0xb6, 0x95, 0xd8, 0xfb, 0x0f, 0x07, 0x41, 0xf9, 0x16,
        0x0f, 0x83, 0x6a, 0xac, 0x65, 0xe2, 0x70, 0xef, 0x69, 0x90, 0x18, 0x80, 0x02, 0x31, 0x00,
        0xa3, 0xda, 0x10, 0x14, 0xd7, 0x93, 0xb8, 0xd1, 0xbe, 0xf5, 0x6f, 0x1a, 0x10, 0xe8, 0x01,
        0xc0, 0x32, 0x42, 0x10, 0x9c, 0x4b, 0x68, 0xbf, 0x10, 0x86, 0x3b, 0xce, 0x15, 0x7e, 0xf5,
        0x7f, 0x3f, 0xba, 0x0f, 0x03, 0xb5, 0x2c, 0x34, 0x91, 0x9b, 0x74, 0x0a, 0x82, 0x53, 0xcf,
        0xa4, 0xe7, 0x53,
    ];

    fn new_cert() -> Result<alloc::vec::Vec<u8>, ResolveError>{
        let algorithm = AlgorithmIdentifier {
            algorithm: ID_EC_PUBKEY_OID,
            parameters: Some(Any::new(Tag::ObjectIdentifier, SECP384R1_OID.as_bytes()).unwrap()),
        };
        let rand = SystemRandom::new();
        let pkcs8_bytes =
            EcdsaKeyPair::generate_pkcs8(&signature::ECDSA_P384_SHA384_ASN1_SIGNING, &rand)
                .map_err(|_| 0);
        let pkc8 = pkcs8_bytes.unwrap();
        let key_pair = ring::signature::EcdsaKeyPair::from_pkcs8(
            &signature::ECDSA_P384_SHA384_ASN1_SIGNING,
            pkc8.as_ref(),
        );
        let key = &key_pair.unwrap();
        // print!("public key is {:?}\n",key.public_key());
        let x509_certificate =
        x509::CertificateBuilder::new(algorithm, algorithm, key.public_key().as_ref())?
            // 1970-01-01T00:00:00Z
            .set_not_before(core::time::Duration::new(0, 0))?
            // 9999-12-31T23:59:59Z
            .set_not_after(core::time::Duration::new(253402300799, 0))?
            .add_extension(Extension::new(
                EXTENDED_KEY_USAGE,
                Some(false),
                Some(&[]),
            )?)?
            .add_extension(Extension::new(
                EXTNID_VTPMTD_REPORT,
                Some(false),
                Some(&[]),
            )?)?
            .add_extension(Extension::new(
                EXTNID_VTPMTD_EVENT_LOG,
                Some(false),
                Some(&[]),
            )?)?
            .build();

        x509_certificate
            .to_vec()
            .map_err(|e| ResolveError::GenerateCertificate(X509Error::DerEncoding(e)))
    }

    #[test]
    fn test_get_cert_from_cert_chain() {
        let mut index = -1;
        let cert_size = CERT_TEST.len();
        let mut res = get_cert_from_certchain(&CERT_TEST, index);
        let mut offset = res.as_ref().unwrap().0;
        let this_cert_len = res.as_ref().unwrap().1 - offset;
        print!("res 0 is {}\n", res.as_ref().unwrap().0);
        print!("res 0 is {}\n", res.as_ref().unwrap().1);
        print!("this_cert_len = {}\n", this_cert_len);
        assert_eq!(cert_size, res.as_ref().unwrap().1);
        index = -2;
        res = get_cert_from_certchain(&CERT_TEST, index);
        assert!(res.is_err());
        index = 100;
        res = get_cert_from_certchain(&CERT_TEST, index);
        assert!(res.is_err());
        index = 0;
        res = get_cert_from_certchain(&CERT_TEST, index);
        offset = res.as_ref().unwrap().0;
        let this_cert_len_1 = res.as_ref().unwrap().1 - offset;
        print!("res 0 is {}\n", res.as_ref().unwrap().0);
        print!("res 0 is {}\n", res.as_ref().unwrap().1);
        assert_eq!(offset, 0);
        assert_eq!(this_cert_len_1 < cert_size, true);
        index = 1;
        res = get_cert_from_certchain(&CERT_TEST, index);
        offset = res.as_ref().unwrap().0;
        let this_cert_len_2 = res.as_ref().unwrap().1 - offset;
        print!("res 0 is {}\n", res.as_ref().unwrap().0);
        print!("res 0 is {}\n", res.as_ref().unwrap().1);
        assert_eq!(offset, this_cert_len_1);
        assert_eq!(this_cert_len_2 < cert_size, true);
    }

    #[test]
    fn test_generate_ecdsa_keypairs() {
        let res = generate_ecdsa_keypairs();
        assert_eq!(res.is_none(), false);
    }
    #[test]
    fn test_verify_peer_cert_invalid_cert() {
        let mut td_report_buf: [u8; 1024] = [00; 1024];
        let res = verify_peer_cert(&[], &mut td_report_buf);
        assert!(res.is_err());
    }

    #[test]
    fn test_verify_peer_cert() {
        let mut td_report_buf: [u8; 1024] = [00; 1024];
        let res = verify_peer_cert(&CERT_TEST, &mut td_report_buf);
        assert!(res.is_err());
    }

    #[test]
    fn test_verify_peer_cert_invalid_buffer() {
        let res = verify_peer_cert(&CERT_TEST, &mut []);
        assert!(res.is_err());
        print!("error is {:?}\n", res.err());
    }
    // #[test]
    // fn test_generate_td_report(){
    //     let mut public_key:[u8;48] = [0xdf;48];
    //     let res = generate_td_report(&mut public_key);
    //     assert_eq!(res.is_err(),false);
    // }

    // #[test]
    // fn test_generate_certificate(){
    //     let mut pkcs8 = generate_ecdsa_keypairs().expect("Failed to generate ecdsa keypair.\n");

    //     let mut key_pair = ring::signature::EcdsaKeyPair::from_pkcs8(
    //         &signature::ECDSA_P384_SHA384_ASN1_SIGNING,
    //         pkcs8.as_ref(),
    //     );
    //     let mut key_pair = key_pair.unwrap();
    //     let event_log :[u8;0x100] = [0xff;0x100];
    //     let res = generate_certificate(&key_pair, &event_log);
    //     assert_eq!(res.is_err(),false);
    // }

    // #[test]
    // fn test_parse_extensions(){
    //     let extn_id: ObjectIdentifier = ObjectIdentifier::new("2.5.29.37");
    //     let extension = Extension::new(extn_id, Some(false), None).unwrap();
    //     let extensios = vec![extension];
    //     // let res = parse_extensions();
    // }
}